<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.metis.admin.dao.TaskMapper">
  <resultMap id="BaseResultMap" type="com.platon.metis.admin.dao.entity.Task">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="task_Id" jdbcType="VARCHAR" property="taskId" />
    <result column="task_Name" jdbcType="VARCHAR" property="taskName" />
    <result column="owner_Identity_id" jdbcType="VARCHAR" property="ownerIdentityId" />
    <result column="owner_party_id" jdbcType="VARCHAR" property="ownerPartyId" />
    <result column="apply_user" jdbcType="VARCHAR" property="applyUser" />
    <result column="user_type" jdbcType="INTEGER" property="userType" />
    <result column="create_At" jdbcType="TIMESTAMP" property="createAt" />
    <result column="start_At" jdbcType="TIMESTAMP" property="startAt" />
    <result column="auth_At" jdbcType="TIMESTAMP" property="authAt" />
    <result column="auth_Status" jdbcType="VARCHAR" property="authStatus" />
    <result column="end_At" jdbcType="TIMESTAMP" property="endAt" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="duration" jdbcType="BIGINT" property="duration" />
    <result column="cost_core" jdbcType="INTEGER" property="costCore" />
    <result column="cost_Memory" jdbcType="BIGINT" property="costMemory" />
    <result column="cost_Bandwidth" jdbcType="BIGINT" property="costBandwidth" />
    <result column="reviewed" jdbcType="BIT" property="reviewed" />
    <result column="rec_create_time" jdbcType="TIMESTAMP" property="recCreateTime" />
    <result column="rec_update_time" jdbcType="TIMESTAMP" property="recUpdateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, task_Id, task_Name, owner_Identity_id, owner_party_id, apply_user, user_type, create_At, start_At, auth_At, auth_Status, end_At,
    `status`, duration, cost_core, cost_Memory, cost_Bandwidth, reviewed,
    rec_create_time, rec_update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from task
    where id = #{id,jdbcType=BIGINT}
  </select>




  <select id="selectTaskByTaskId" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from task
    <where>
      <if test="taskId != null and taskId !=''">
        and task_Id = #{taskId,jdbcType=VARCHAR}
      </if>
      <if test="keyword != null and keyword != ''">
        and (task_Name like concat('%', #{keyword, jdbcType=VARCHAR}, '%')
        or task_Id like concat('%', #{keyword, jdbcType=VARCHAR}, '%'))
      </if>

    </where>


  </select>


  <select id="selectListTaskByStatusWithSuccessAndFailed"  resultType="java.lang.String">
    SELECT t.task_Id FROM task AS t
    WHERE t.`status` IN (3, 4)
  </select>



  <select id="selectAllTaskCount" resultType="java.lang.Integer">
     SELECT COUNT(t.id) FROM task AS t
  </select>

  <select id="selectTaskRunningCount" resultType="java.lang.Integer">
     SELECT COUNT(t.id) FROM task AS t WHERE t.status = 1 OR t.status = 2
  </select>



  <select id="taskStatistics" resultType="com.platon.metis.admin.dao.entity.TaskStatistics">
    SELECT `owner`.count as ownerCount, algo.count as algoProviderCount, power.count as powerProviderCount, data.count as dataProviderCount, result.count as resultReceiverCount, success.count as successCount, failed.count as failedCount, running.count as runningCount, pending.count as  pendingCount

    from

      (select count(id) as count from task WHERE owner_identity_id = 'identity_b2b2e609a81542558bef5b755b9aaa5c') `owner`,
      (select count(task_id) as count from task_algo_provider WHERE identity_id = 'identity_b2b2e609a81542558bef5b755b9aaa5c') algo,
      (select count(task_id) as count from task_power_provider WHERE identity_id = 'identity_b2b2e609a81542558bef5b755b9aaa5c') power,
      (select count(task_id) as count from task_data_provider WHERE identity_id = 'identity_b2b2e609a81542558bef5b755b9aaa5c') data,

      (select count(task_id) as count from task_result_consumer WHERE consumer_identity_id = 'identity_b2b2e609a81542558bef5b755b9aaa5c') result,
      (SELECT COUNT(id) as count FROM task WHERE `status` = 4) success,
      (SELECT COUNT(id) as count FROM task WHERE `status` = 3) failed,
      (SELECT COUNT(id) as count FROM task WHERE `status` = 2) running,
      (SELECT COUNT(id) as count FROM task WHERE `status` = 1) pending
  </select>


  <resultMap id="BaseResultMap_With_Role" type="com.platon.metis.admin.dao.entity.Task" extends="BaseResultMap">
    <result column="taskSponsor" property="dynamicFields.taskSponsor" jdbcType="BOOLEAN"/>
    <result column="powerProvider" property="dynamicFields.powerProvider" jdbcType="BOOLEAN"/>
    <result column="dataProvider" property="dynamicFields.dataProvider" jdbcType="BOOLEAN"/>
    <result column="resultConsumer" property="dynamicFields.resultConsumer" jdbcType="BOOLEAN"/>
    <result column="algoProvider" property="dynamicFields.algoProvider" jdbcType="BOOLEAN"/>
  </resultMap>

  <select id="listTaskByIdentityIdWithRole" parameterType="map" resultMap="BaseResultMap_With_Role">
    SELECT t.*, temp.taskSponsor, temp.powerProvider, temp.dataProvider, temp.resultConsumer, temp.algoProvider
    from task t
    join (
      select tmp.task_id, sum(tmp.taskSponsor) as taskSponsor, sum(tmp.powerProvider) as powerProvider , sum(tmp.dataProvider) as dataProvider, sum(tmp.resultConsumer) as resultConsumer, sum(tmp.algoProvider) as algoProvider
      from (
        select tk.owner_identity_id as identity_id, tk.id as task_id, true taskSponsor, false as powerProvider, false as dataProvider, false as resultConsumer, false algoProvider
        from task tk
        WHERE tk.owner_identity_id = #{identityId,jdbcType=VARCHAR}

        union

        select tap.identity_id, tap.task_id, false taskSponsor, false as powerProvider, false as dataProvider, false as resultConsumer, true algoProvider
        from task_algo_provider tap
        WHERE tap.identity_id = #{identityId,jdbcType=VARCHAR}

        union

        select tpp.identity_id, tpp.task_id, false taskSponsor, true as powerProvider, false as dataProvider, false as resultConsumer, false algoProvider
        from task_power_provider tpp
        WHERE tpp.identity_id= #{identityId,jdbcType=VARCHAR}

        union

        select tdp.identity_id, tdp.task_id, false taskSponsor, false as powerProvider, true as dataProvider, false as resultConsumer, false algoProvider
        from task_data_provider tdp
        WHERE tdp.identity_id= #{identityId,jdbcType=VARCHAR}

        union

        select DISTINCT trc.consumer_identity_id as identity_id, trc.task_id, false taskSponsor, false as powerProvider, false as dataProvider, true as resultConsumer, false algoProvider
        from task_result_consumer trc
        WHERE trc.consumer_identity_id = #{identityId,jdbcType=VARCHAR}

      ) tmp
      group by tmp.task_id
    ) temp on t.id = temp.task_id
    <where>
      <if test="startTimestamp != null">
         and t.create_At <![CDATA[>= ]]> #{startTimestamp,jdbcType=TIMESTAMP}
      </if>
      <if test="endTimestamp != null">
        and t.end_At <![CDATA[<= ]]> #{endTimestamp,jdbcType=TIMESTAMP}
      </if>
    </where>
    order by t.create_At DESC
  </select>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from task
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.platon.metis.admin.dao.entity.Task">
    insert into task (task_Id, task_name, owner_identity_id, owner_party_id,
      apply_user, user_type,
      create_At, start_At, auth_At, 
      auth_Status, end_At, status,
      duration, cost_core, cost_Memory, 
      cost_Bandwidth, reviewed,
      rec_create_time, rec_update_time)
    values (#{taskId,jdbcType=VARCHAR}, #{taskName,jdbcType=VARCHAR}, #{ownerIdentityId,jdbcType=VARCHAR}, #{ownerPartyId,jdbcType=VARCHAR},
      #{applyUser,jdbcType=VARCHAR}, #{userType,jdbcType=INTEGER},
      #{createAt,jdbcType=TIMESTAMP}, #{startAt,jdbcType=TIMESTAMP}, #{authAt,jdbcType=TIMESTAMP}, 
      #{authStatus,jdbcType=VARCHAR}, #{endAt,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER},
      #{duration,jdbcType=BIGINT}, #{costCore,jdbcType=INTEGER}, #{costMemory,jdbcType=BIGINT},
      #{costBandwidth,jdbcType=BIGINT}, #{reviewed,jdbcType=BIT},
      #{recCreateTime,jdbcType=TIMESTAMP}, #{recUpdateTime,jdbcType=TIMESTAMP})
  </insert>


  <insert id="insertBatch" parameterType="java.util.List">
    replace into task (task_Id, task_name, owner_identity_id, owner_party_id,
    apply_user, user_type,
    create_At, start_At, auth_At,
    auth_Status, end_At, status,
    duration, cost_core, cost_Memory,
    cost_Bandwidth,
    rec_create_time, rec_update_time)
    values
    <foreach collection ="list" item="item" index="index" separator=",">
      (#{item.taskId,jdbcType=VARCHAR}, #{item.taskName,jdbcType=VARCHAR}, #{item.ownerIdentityId,jdbcType=VARCHAR}, #{item.ownerPartyId,jdbcType=VARCHAR},
      #{item.applyUser,jdbcType=VARCHAR}, #{item.userType,jdbcType=INTEGER},
      #{item.createAt,jdbcType=TIMESTAMP}, #{item.startAt,jdbcType=TIMESTAMP}, #{item.authAt,jdbcType=TIMESTAMP},
      #{item.authStatus,jdbcType=VARCHAR}, #{item.endAt,jdbcType=TIMESTAMP}, #{item.status,jdbcType=INTEGER},
      #{item.duration,jdbcType=BIGINT}, #{item.costCore,jdbcType=INTEGER}, #{item.costMemory,jdbcType=BIGINT},
      #{item.costBandwidth,jdbcType=BIGINT},
      #{item.recCreateTime,jdbcType=TIMESTAMP}, #{item.recUpdateTime,jdbcType=TIMESTAMP})
    </foreach>
  </insert>




  <update id="updateByPrimaryKey" parameterType="com.platon.metis.admin.dao.entity.Task">
    update task
    set task_Name = #{taskName,jdbcType=VARCHAR},
      owner_Identity_id = #{ownerIdentityId,jdbcType=VARCHAR},
      owner_party_id = #{ownerPartyId,jdbcType=VARCHAR},
      apply_user =  #{applyUser,jdbcType=VARCHAR},
      user_type = #{userType,jdbcType=INTEGER},
      create_At = #{createAt,jdbcType=TIMESTAMP},
      start_At = #{startAt,jdbcType=TIMESTAMP},
      auth_At = #{authAt,jdbcType=TIMESTAMP},
      auth_Status = #{authStatus,jdbcType=VARCHAR},
      end_At = #{endAt,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER},
      duration = #{duration,jdbcType=BIGINT},
      cost_core = #{costCore,jdbcType=INTEGER},
      cost_Memory = #{costMemory,jdbcType=BIGINT},
      cost_Bandwidth = #{costBandwidth,jdbcType=BIGINT},
      reviewed = #{reviewed,jdbcType=BIT},
      rec_create_time = #{recCreateTime,jdbcType=TIMESTAMP},
      rec_update_time = #{recUpdateTime,jdbcType=TIMESTAMP}
    where task_Id = #{taskId,jdbcType=VARCHAR}
  </update>




  <update id="updateTaskReviewedById" parameterType="java.util.Map">
    update task
    set reviewed = #{reviewed,jdbcType=BIT}
    where task_Id = #{taskId,jdbcType=VARCHAR}
  </update>



  <update id="batchUpdate" parameterType="java.util.List" >
    <foreach collection="list" item="item" index="index" open="" close="" separator=";">
      update task
      set task_Name = #{taskName,jdbcType=VARCHAR},
      owner_Identity_id = #{ownerIdentityId,jdbcType=VARCHAR},
      owner_party_id = #{ownerPartyId,jdbcType=VARCHAR},
      apply_user =  #{applyUser,jdbcType=VARCHAR},
      user_type = #{userType,jdbcType=INTEGER},
      create_At = #{createAt,jdbcType=TIMESTAMP},
      start_At = #{startAt,jdbcType=TIMESTAMP},
      auth_At = #{authAt,jdbcType=TIMESTAMP},
      auth_Status = #{authStatus,jdbcType=VARCHAR},
      end_At = #{endAt,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER},
      duration = #{duration,jdbcType=BIGINT},
      cost_core = #{costCore,jdbcType=INTEGER},
      cost_Memory = #{costMemory,jdbcType=BIGINT},
      cost_Bandwidth = #{costBandwidth,jdbcType=BIGINT},
      reviewed = #{reviewed,jdbcType=BIT},
      rec_create_time = #{recCreateTime,jdbcType=TIMESTAMP},
      rec_update_time = #{recUpdateTime,jdbcType=TIMESTAMP}
      where task_Id = #{taskId,jdbcType=VARCHAR}
    </foreach>
  </update>

</mapper>