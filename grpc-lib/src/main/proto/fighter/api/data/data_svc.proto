syntax = "proto3";

option go_package = "github.com/datumtechs/datum-network-carrier/pb/fighter/api";
//一个proto文件会生成一个最外部类，里面会包含很多子类，指定这个proto文件生成的类所属的包名
option java_package = "com.platon.datum.admin.grpc.fighter.api.data";
//这个proto文件生成会为其中的所有message生成一个最外部类，此配置设置该类类名，如果没有指定此值，则类名为proto文件名的驼峰命名方法
option java_outer_classname = "DataSvc";

package fighter.api.data;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "common/constant/fighter_enum.proto";
import "common/constant/carrier_enum.proto";
import "fighter/types/types.proto";


service DataProvider {
  rpc GetStatus(google.protobuf.Empty) returns (GetStatusReply) {
        option(google.api.http) = {
            get: "/data/getStatus"
        };
  }
  rpc ListData(google.protobuf.Empty) returns (ListDataReply) {
        option(google.api.http) = {
            get: "/data/listData"
        };
  }
  rpc UploadData(stream UploadRequest) returns (UploadReply) {
        option(google.api.http) = {
            post: "/data/uploadData"
            body: "*"
        };
  }
  rpc BatchUpload(stream UploadRequest) returns (stream UploadReply) {
  	option(google.api.http) = {
	    post: "/data/batchUpload"
	    body: "*"
	};
  }
  rpc DownloadData(DownloadRequest) returns (stream DownloadReply) {
        option(google.api.http) = {
	    post: "/data/downLoadData"
	    body: "*"
	};
  }
  rpc DeleteData(DownloadRequest) returns (UploadReply) {}

  rpc HandleTaskReadyGo(fighter.types.TaskReadyGoReq) returns (fighter.types.TaskReadyGoReply) {
        option(google.api.http) = {
        post: "/data/handleTaskReadyGo"
        body: "*"
    };
  }

  rpc HandleCancelTask(fighter.types.TaskCancelReq) returns (fighter.types.TaskCancelReply) {
        option(google.api.http) = {
        post: "/data/handleCancelTask"
        body: "*"
    };
  }
}

message DownloadRequest {
  string data_path = 1;
  map<string, string> options = 2;  // e.g.: compress: zip|tar.gz, data_root_dir: data|result
}



message DownloadReply {
  oneof data {
    common.constant.TaskStatus status = 1;
    bytes content = 2;
  }
}

message UploadRequest {
  string data_name = 1;
  bytes content = 2;
  common.constant.OrigindataType data_type = 3;
  string description = 4;
  repeated string columns = 5;
  repeated string col_dtypes = 6;
  repeated string keywords = 7;
}

message UploadReply {
  int32  status = 1;    // 响应码
  string msg = 2;       // 错误信息
  string data_id = 3;
  string data_path = 4;
  string data_hash = 5;
}

message ListDataReply {
  message Row {
    string data_id = 1;
    string info = 2;
    string data_name = 3;
    int32 size = 4;
  }
  int32  status = 1;    // 响应码
  string msg = 2;       // 错误信息
  repeated Row data = 3;
}

message GetDataDetailReply {
  message Item {
    string column = 1;
    string dtype = 2;
  }
  int32  status = 1;    // 响应码
  string msg = 2;       // 错误信息
  int32  n_rows = 3;
  repeated Item items = 4;
}

message GetStatusReply {
  int32  status = 1;    // 响应码
  string msg = 2;       // 错误信息
  uint32 total_cpu = 3;
  uint32 used_cpu = 4;
  uint32 idle_cpu = 5;
  uint64 total_memory = 6;
  uint64 used_memory = 7;
  uint64 idle_memory = 8;
  uint64 total_disk = 9;
  uint64 used_disk = 10;
  uint64 idle_disk = 11;
  uint64 total_bandwidth = 12;
  uint64 used_bandwidth = 13;
  uint64 idle_bandwidth = 14;
}
