syntax = "proto3";
package datasvc;
option go_package = "../gateway/data_svc";

// 生成类的包名
option java_package = "com.platon.metis.admin.grpc.service";
//生成的数据访问类的类名，如果没有指定此值，则生成的类名为proto文件名的驼峰命名方法
option java_outer_classname = "DataProviderRpcMessage";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "fighter/common.proto";


service DataProvider {
  rpc GetStatus(google.protobuf.Empty) returns (GetStatusReply) {
    option(google.api.http) = {
      get: "/data/getStatus"
    };
  }
  rpc ListData(google.protobuf.Empty) returns (ListDataReply) {
    option(google.api.http) = {
      get: "/data/listData"
    };
  }
  rpc UploadData(stream UploadRequest) returns (UploadReply) {
    option(google.api.http) = {
      post: "/data/uploadData"
      body: "*"
    };
  }
  rpc BatchUpload(stream UploadRequest) returns (stream UploadReply) {
    option(google.api.http) = {
      post: "/data/batchUpload"
      body: "*"
    };
  }
  rpc DownloadData(DownloadRequest) returns (stream DownloadReply) {
    option(google.api.http) = {
      post: "/data/downLoadData"
      body: "*"
    };
  }
  rpc DeleteData(DownloadRequest) returns (UploadReply) {}

  rpc SendSharesData(SendSharesDataRequest) returns (SendSharesDataReply) {}

  rpc HandleTaskReadyGo(common.TaskReadyGoReq) returns (common.TaskReadyGoReply) {
    option(google.api.http) = {
      post: "/data/handleTaskReadyGo"
      body: "*"
    };
  }

  rpc HandleCancelTask(common.TaskCancelReq) returns (common.TaskCancelReply) {
    option(google.api.http) = {
      post: "/data/handleCancelTask"
      body: "*"
    };
  }
}

message DownloadRequest {
  string file_path = 1;
  map<string, string> options = 2;  // e.g.: compress: zip|tar.gz, file_root_dir: data|result
}

enum TaskStatus {
  Start = 0;
  Finished = 1;
  Cancelled = 2;
  Failed = 3;
}

message DownloadReply {
  oneof data {
    TaskStatus status = 1;
    bytes content = 2;
  }
}

message FileInfo {
  string file_name = 1;
  string file_type = 2;
  string description = 3;
  repeated string columns = 4;
  repeated string col_dtypes = 5;
  repeated string keywords = 6;
}

message UploadRequest {
  string file_name = 1;
  bytes content = 2;
  string file_type = 3;
  string description = 4;
  repeated string columns = 5;
  repeated string col_dtypes = 6;
  repeated string keywords = 7;
}

message UploadReply {
  bool ok = 1;
  string data_id = 2;
  string file_path = 3;
  string data_hash = 4;
}

message ListDataReply {
  message Row {
    string data_id = 1;
    string info = 2;
    string file_name = 3;
    int32 size = 4;
  }
  repeated Row data = 1;
}

message GetDataDetailReply {
  message Item {
    string column = 1;
    string dtype = 2;
  }
  int32 n_rows = 1;
  repeated Item items = 2;
}

message GetStatusReply {
  uint32 total_cpu = 1;
  uint32 used_cpu = 2;
  uint32 idle_cpu = 3;
  uint64 total_memory = 4;
  uint64 used_memory = 5;
  uint64 idle_memory = 6;
  uint64 total_disk = 7;
  uint64 used_disk = 8;
  uint64 idle_disk = 9;
  uint64 total_bandwidth = 10;
  uint64 used_bandwidth = 11;
  uint64 idle_bandwidth = 12;
}

message SendSharesDataRequest {
  string data_id = 1;
  repeated string receivers = 2;
}

message SendSharesDataReply {
  TaskStatus status = 1;
}

