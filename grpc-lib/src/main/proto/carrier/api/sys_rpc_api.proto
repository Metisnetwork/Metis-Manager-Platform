syntax = "proto3";

package rpcapi;

// 生成类的包名
option java_package = "com.platon.rosettanet.admin.grpc";
//生成的数据访问类的类名，如果没有指定此值，则生成的类名为proto文件名的驼峰命名方法
option java_outer_classname = "YarnRpcMessage";

import "carrier/api/common_message.proto";
import "carrier/api/task_rpc_api.proto";


//  ------------------------  yarn  ------------------------

// 调度服务的信息
message YarnNodeInfo {
    string                      node_type     = 1;                             // 服务node的类型
    string                      node_id       = 2;                               // 调度服务的 nodeId, 代表整个机构的 nodeId
    string                      internal_ip   = 3;                           // 调度服务的内网 ip, 给 管理台用
    string                      external_ip   = 4;                           // 调度服务的外网 ip, 给 外部做p2p用
    string                      internal_port = 5;                         // 调度服务的内网 port, 给 管理台用
    string                      external_port = 6;                         // 调度服务的外网 port, 给 外部做p2p用
    string                      identity_type = 7;                         // 身份认证标识的类型 (ca 或者 did)
    string                      identity_id   = 8;                           // 身份认证标识的id
    ResourceUsedDetailShow      resource_used = 9;                         // 调度服务系统本身资源信息
    repeated YarnRegisteredPeer peers         = 10;                                // 调度服务上被注册的 计算or数据服务节点信息
    repeated SeedPeer           seed_peers    = 11;                           // 调度服务上被注册的种子节点信息
    string                      state         = 12;                                // 调度服务自身的状态信息 (active: 活跃; leave: 离开网络; join: 加入网络 unuseful: 不可用)
    string                      name          = 13;                                 // 组织的Name
}


// 调度服务的系统资源信息
message YarnNodeSysInfo {
    string name            = 1;                  // 调度服务系统名称
    uint64 total_mem       = 2;             // 调度服务系统的总内存 (单位: byte)
    uint64 used_mem        = 3;              // 调度服务系统的已用内存 (单位: byte)
    uint64 total_processor = 4;       // 调度服务的总内核数 (单位: 个)
    uint64 used_processor  = 5;        // 调度服务的已用内核数 (单位: 个)
    uint64 total_bandwidth = 6;       // 调度服务的总带宽数 (单位: bps)
    uint64 used_bandwidth  = 7;        // 调度服务的已用带宽数 (单位: bps)
}


// 调度服务上被注册的资源节点信息
message YarnRegisteredPeer {
    string                   node_type   = 1;                      // 计算or数据服务node的类型
    YarnRegisteredPeerDetail node_detail = 2;                    // 计算or数据服务node的网络信息
}

message YarnRegisteredPeerDetail {
    string id            = 1;                            // 计算or数据服务的唯一Id
    string internal_ip   = 2;                   // 计算or数据服务的内网 ip, 给 管理台用
    string external_ip   = 3;                   // 计算or数据服务的外网 ip, 给 多方协作任务用
    string internal_port = 4;                 // 计算or数据服务的内网 port, 给 管理台用
    string external_port = 5;                 // 计算or数据服务的外网 port, 给 多方协作任务用
    int32  conn_state    = 6;                    // 计算or数据服务的状态 (-1: 未被调度服务连接上; 0: 连接上; 1: 算力为启用<计算服务>; 2: 算力启用<计算服务>; 3: 算力被占用<计算服务算力正在被任务占用>)
}

message SeedPeer {
    string id            = 1;                            // 种子节点的唯一Id
    string internal_ip   = 2;                   // 种子节点的内网 ip, 给 管理台用
    string internal_port = 3;                 // 种子节点的内网 port, 给 管理台用
    int32  conn_state    = 4;                    // 是否被调度服务连接上 (-1: 未被调度服务连接上; 0: 连接上)
}

// 调度服务上的 计算服务详情信息
message YarnRegisteredJobNode {
    string                       id            = 2;                            // 计算服务的唯一Id
    string                       internal_ip   = 3;                   // 计算服务的内网 ip, 给 管理台用
    string                       external_ip   = 4;                   // 计算服务的外网 ip, 给 多方协作任务用
    string                       internal_port = 5;                 // 计算服务的内网 port, 给 管理台用
    string                       external_port = 6;                 // 计算服务的外网 port, 给 多方协作任务用
    ResourceUsedDetailShow       information   = 7;                   // 计算服务的算力资源使用情况
    uint64                       duration      = 8;                      // 计算服务远行时长 (从加入网络中的时间点计算)
    YarnRegisteredJobNodeTaskIds task          = 9;                          // 计算服务上的任务Id和个数
}

message YarnRegisteredJobNodeTaskIds {
    uint32          count    = 1;
    repeated string task_ids = 2;
}


message YarnRegisteredDataNode {
    string                      id            = 2;                            // 数据服务的唯一Id
    string                      internal_ip   = 3;                   // 数据服务的内网 ip, 给 管理台用
    string                      external_ip   = 4;                   // 数据服务的外网 ip, 给 多方协作任务用
    string                      internal_port = 5;                 // 数据服务的内网 port, 给 管理台用
    string                      external_port = 6;                 // 数据服务的外网 port, 给 多方协作任务用
    ResourceUsedDetailShow      information   = 7;                   // 数据服务的算力资源使用情况
    uint64                      duration      = 8;                      // 数据服务远行时长 (从加入网络中的时间点计算)
    YarnRegisteredDataNodeDelta delta         = 9;                         // 数据服务上的文件统计信息
}

message YarnRegisteredDataNodeDelta {
    uint32 fileCount     = 1;                           // 数据服务对外公开的源文件个数
    uint32 fileTotalSize = 2;                       // 数据服务对外公开的源文件总大小  (单位: byte)
}


message GetNodeInfoResponse {
    int32        status      = 1;                      // 响应码
    string       msg         = 2;                         // 错误信息
    YarnNodeInfo information = 3;                 // 调度服务系统信息
}


message GetRegisteredPeersResponse {
    int32                           status     = 1;                               // 响应码
    string                          msg        = 2;                                  // 错误信息
    repeated YarnRegisteredJobNode  job_nodes  = 3;                            // 注册在调度服务上的 计算服务信息
    repeated YarnRegisteredDataNode data_nodes = 4;                           // 注册在调度服务上的 数据服务信息
}


message SetSeedNodeRequest {
    string internal_ip   = 1;                   // 种子节点的内网 ip, 给 管理台用
    string internal_port = 2;                 // 种子节点的内网 port, 给 管理台用
}
message SetSeedNodeResponse {
    int32    status    = 1;                      // 响应码
    string   msg       = 2;                         // 错误信息
    SeedPeer seed_peer = 3;
}


message UpdateSeedNodeRequest {
    string id            = 1;                            // 种子节点的唯一Id
    string internal_ip   = 2;                   // 种子节点的内网 ip, 给 管理台用
    string internal_port = 3;                 // 种子节点的内网 port, 给 管理台用
}




message GetSeedNodeListResponse {
    int32             status     = 1;                      // 响应码
    string            msg        = 2;                         // 错误信息
    repeated SeedPeer seed_peers = 3;
}



message SetDataNodeRequest {
    string internal_ip   = 3;                   // 数据服务的内网 ip, 给 管理台用
    string external_ip   = 4;                   // 数据服务的外网 ip, 给 多方协作任务用
    string internal_port = 5;                 // 数据服务的内网 port, 给 管理台用
    string external_port = 6;                 // 数据服务的外网 port, 给 多方协作任务用
}

message SetDataNodeResponse {
    int32                    status    = 1;                      // 响应码
    string                   msg       = 2;                         // 错误信息
    YarnRegisteredPeerDetail data_node = 3;
}

message UpdateDataNodeRequest {
    string id            = 1;                            // 数据服务的唯一id
    string internal_ip   = 3;                   // 数据服务的内网 ip, 给 管理台用
    string external_ip   = 4;                   // 数据服务的外网 ip, 给 多方协作任务用
    string internal_port = 5;                 // 数据服务的内网 port, 给 管理台用
    string external_port = 6;                 // 数据服务的外网 port, 给 多方协作任务用
}

message GetRegisteredNodeListResponse {
    int32                       status = 1;                      // 响应码
    string                      msg    = 2;                         // 错误信息
    repeated YarnRegisteredPeer nodes  = 3;
}


message SetJobNodeRequest {
    string internal_ip   = 3;                   // 计算服务的内网 ip, 给 管理台用
    string external_ip   = 4;                   // 计算服务的外网 ip, 给 多方协作任务用
    string internal_port = 5;                 // 计算服务的内网 port, 给 管理台用
    string external_port = 6;                 // 计算服务的外网 port, 给 多方协作任务用
}

message SetJobNodeResponse {
    int32                    status   = 1;                      // 响应码
    string                   msg      = 2;                         // 错误信息
    YarnRegisteredPeerDetail job_node = 3;
}

message UpdateJobNodeRequest {
    string id            = 1;                            // 计算服务的唯一id
    string internal_ip   = 3;                   // 计算服务的内网 ip, 给 管理台用
    string external_ip   = 4;                   // 计算服务的外网 ip, 给 多方协作任务用
    string internal_port = 5;                 // 计算服务的内网 port, 给 管理台用
    string external_port = 6;                 // 计算服务的外网 port, 给 多方协作任务用
}



message ReportTaskEventRequest {
    TaskEventDeclare task_event = 1;
}


// 未定义
message ReportTaskResourceExpenseRequest {

}

// ## 调度服务 - 系统状态 接口
service YarnService {

  // Getter YarnNode ...
  // 查看自身调度服务信息
  rpc GetNodeInfo (EmptyGetParams) returns (GetNodeInfoResponse);
  // 查看自身调度服务的 peer注册信息
  rpc GetRegisteredPeers (EmptyGetParams) returns (GetRegisteredPeersResponse);



  // about seed
  // 新增种子节点信息
  rpc SetSeedNode (SetSeedNodeRequest) returns (SetSeedNodeResponse);
  // 修改种子节点信息
  rpc UpdateSeedNode (UpdateSeedNodeRequest) returns (SetSeedNodeResponse);
  // 删除种子节点信息
  rpc DeleteSeedNode (DeleteRegisteredNodeRequest) returns (SimpleResponseCode);
  // 查询种子节点列表
  rpc GetSeedNodeList (EmptyGetParams) returns (GetSeedNodeListResponse);

  // about dataNode
  // 新增数据服务信息
  rpc SetDataNode (SetDataNodeRequest) returns (SetDataNodeResponse);
  // 修改数据服务信息
  rpc UpdateDataNode (UpdateDataNodeRequest) returns (SetDataNodeResponse);
  // 删除数据服务信息
  rpc DeleteDataNode (DeleteRegisteredNodeRequest) returns (SimpleResponseCode);
  // 查询数据服务列表
  rpc GetDataNodeList (EmptyGetParams) returns (GetRegisteredNodeListResponse);

  // about jobNode
  // 新增计算服务信息
  rpc SetJobNode (SetJobNodeRequest) returns (SetJobNodeResponse);
  // 修改计算服务信息
  rpc UpdateJobNode (UpdateJobNodeRequest) returns (SetJobNodeResponse);
  // 删除计算服务信息
  rpc DeleteJobNode (DeleteRegisteredNodeRequest) returns (SimpleResponseCode);
  // 查询计算服务列表
  rpc GetJobNodeList (EmptyGetParams) returns (GetRegisteredNodeListResponse);

  // about report
  // 上报任务事件
  rpc ReportTaskEvent (ReportTaskEventRequest) returns (SimpleResponseCode);
  // 上报资源使用实况
  rpc ReportTaskResourceExpense (ReportTaskResourceExpenseRequest) returns (SimpleResponseCode);

}
